{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerPlugin } from '@capacitor/core';\nimport type { DeviceModel} from '@ledgerhq/devices';\nimport { identifyUSBProductId, ledgerUSBVendorId } from '@ledgerhq/devices';\nimport { DisconnectedDevice, DisconnectedDeviceDuringOperation } from '@ledgerhq/errors';\nimport type { DescriptorEvent } from '@ledgerhq/hw-transport';\nimport Transport from '@ledgerhq/hw-transport';\nimport { log } from '@ledgerhq/logs';\nimport { concat, from, Subject } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport type { CapacitorUSBPluginPlugin, ICapacitorUSBDevice } from './definitions';\n\nconst CapacitorUSBPlugin = registerPlugin<CapacitorUSBPluginPlugin>(\n  'CapacitorUSBPlugin',\n  {\n    web: () => import('./web').then(m => new m.CapacitorUSBPluginWeb()),\n  },\n);\n\ntype DeviceObj = ICapacitorUSBDevice;\n\nconst disconnectedErrors = [\n  'I/O error',\n  \"Attempt to invoke virtual method 'int android.hardware.usb.UsbDevice.getDeviceClass()' on a null object reference\",\n  'Invalid channel',\n  'Permission denied by user for device',\n];\n\nexport async function listLedgerDevices(): Promise<DeviceObj[]> {\n  const devices = (await CapacitorUSBPlugin.getDeviceList()).devices;\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n}\n\nconst liveDeviceEventsSubject: Subject<DescriptorEvent<any>> = new Subject();\nCapacitorUSBPlugin.addListener('onDeviceConnect', (device: any) => {\n  if (device.vendorId !== ledgerUSBVendorId) return;\n  const deviceModel = identifyUSBProductId(device.productId);\n  liveDeviceEventsSubject.next({\n    type: 'add',\n    descriptor: device,\n    deviceModel,\n  });\n});\nCapacitorUSBPlugin.addListener('onDeviceDisconnect', (device: any) => {\n  if (device.vendorId !== ledgerUSBVendorId) return;\n  const deviceModel = identifyUSBProductId(device.productId);\n  liveDeviceEventsSubject.next({\n    type: 'remove',\n    descriptor: device,\n    deviceModel,\n  });\n});\nconst liveDeviceEvents = liveDeviceEventsSubject;\n/**\n * Ledger's React Native HID Transport implementation\n * @example\n * import TransportHID from \"@ledgerhq/react-native-hid\";\n * ...\n * TransportHID.create().then(transport => ...)\n */\n\nexport class HIDTransport extends Transport {\n  deviceId: number;\n\n  deviceModel: DeviceModel | null | undefined;\n\n  constructor(deviceId: number, productId: number) {\n    super();\n    this.deviceId = deviceId;\n    this.deviceModel = identifyUSBProductId(productId);\n  }\n\n  /**\n   * Check if the transport is supported (basically true on Android)\n   */\n  static isSupported = (): Promise<boolean> => Promise.resolve(true);\n\n  /**\n   * List currently connected devices.\n   * @returns Promise of devices\n   */\n  static async list(): Promise<any[]> {\n    if (!this.isSupported) return Promise.resolve([]);\n    return listLedgerDevices();\n  }\n\n  /**\n   * Listen to ledger devices events\n   */\n  static listen(observer: any): any {\n    if (!this.isSupported) {\n      return {\n      };\n    }\n\n    return concat(\n      from(listLedgerDevices()).pipe(\n        mergeMap((devices) => from(\n          devices.map((device: DeviceObj) => ({\n            type: 'add',\n            descriptor: device,\n            deviceModel: identifyUSBProductId(device.productId),\n          })),\n        )),\n      ),\n      liveDeviceEvents,\n    ).subscribe(observer);\n  }\n\n  /**\n   * Open a the transport with a Ledger device\n   */\n  static async open(deviceObj: DeviceObj): Promise<HIDTransport> {\n    try {\n      const result = await CapacitorUSBPlugin.openDevice({ deviceId: deviceObj.id });\n      if (result.success) {\n        return new HIDTransport(deviceObj.id, deviceObj.productId);\n      } else {\n        throw new Error();\n      }\n    } catch (error: any) {\n      if (disconnectedErrors.includes(error.message)) {\n        throw new DisconnectedDevice(error.message);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * @param {*} apdu input value\n   * @returns Promise of apdu response\n   */\n  async exchange(apdu: Buffer): Promise<any> {\n    return this.exchangeAtomicImpl(async () => {\n      try {\n        const apduHex = apdu.toString('hex');\n        log('apdu', `=> ${apduHex}`);\n        const result = await CapacitorUSBPlugin.exchange({ deviceId: this.deviceId, apduHex });\n        const resultHex = Buffer.from(result.response, 'hex');\n        log('apdu', `<= ${resultHex}`);\n        return resultHex;\n      } catch (error: any) {\n        if (disconnectedErrors.includes(error.message)) {\n          this.emit('disconnect', error);\n          throw new DisconnectedDeviceDuringOperation(error.message);\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Close the transport\n   * @returns Promise\n   */\n  async close(): Promise<void> {\n    await this.exchangeBusyPromise;\n    void CapacitorUSBPlugin.closeDevice({ deviceId: this.deviceId });\n  }\n}\n\nexport * from './definitions';\nexport { CapacitorUSBPlugin };\n"]}