{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface ICapacitorUSBDevice {\n  id: number;\n  name: string;\n  vendorId: number;\n  productId: number;\n}\n\nexport interface CapacitorUSBPluginPlugin {\n  getDeviceList(): Promise<{\n    devices: ICapacitorUSBDevice[]\n  }>;\n  openDevice(options: { deviceId: number }): Promise<{ success: boolean }>;\n  exchange(options: { deviceId: number; apduHex: string }): Promise<{ response: string }>;\n  closeDevice(options: { deviceId: number }): Promise<{ response: string }>;\n\n  addListener(\n    eventName: 'onDeviceConnect',\n    handler: (device: ICapacitorUSBDevice) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'onDeviceDisconnect',\n    handler: (device: ICapacitorUSBDevice) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n"]}